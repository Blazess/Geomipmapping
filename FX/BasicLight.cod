//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer PerObject
{
    float4x4 g_worldViewProj;           // Offset:    0, size:   64
    float4x4 g_world;                   // Offset:   64, size:   64
    float4x4 g_worldInvTranspose;       // Offset:  128, size:   64
    Material g_material;                // Offset:  192, size:   48
}

cbuffer PerFrame
{
    DirLight g_lights[3];               // Offset:    0, size:  192
    float3  g_eyePos;                   // Offset:  192, size:   12
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_world;                  // Offset:   64 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_temps 3
                
                #line 36 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // vout<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // vout<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // vout<2:NaN:Inf>
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // vout<3:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // vout<4:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // vout<5:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // vout<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // vout<7:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // vout<8:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // vout<9:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o0.xyz, r1.xyzx  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64 [unused]
                //   float4x4 g_world;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48
                //
                // }
                //
                // cbuffer PerFrame
                // {
                //
                //   struct DirLight
                //   {
                //       
                //       float4 ambient;                // Offset:    0
                //       float4 diffuse;                // Offset:   16
                //       float4 specular;               // Offset:   32
                //       float3 dir;                    // Offset:   48
                //       float unused;                  // Offset:   60
                //
                //   } g_lights[3];                     // Offset:    0 Size:   192
                //   float3 g_eyePos;                   // Offset:  192 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                // PerFrame                          cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[13], dynamicIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                
                #line 46 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                mov r0.xyz, -v0.xyzx
                add r0.xyz, r0.xyzx, cb1[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 50
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v2.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 54
                mov r2.xyz, l(0,0,0,0)  // A<0: -0f,1: -0f,2: -0f>
                
                #line 59
                mov r0.w, l(0)  // i<0: 0>
                mov r3.xyz, r2.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r2.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r2.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r0.w  // i<0:[0,1]>
                loop 
                  ilt r2.w, r1.w, l(1)
                  breakc_z r2.w
                
                #line 62
                  nop 
                  mov r6.xyz, cb0[12].xyzx  // mat<0,1,2>
                  mov r7.xyz, cb0[13].xyzx  // mat<4,5,6>
                  mov r8.xyzw, cb0[14].xyzw  // mat<8,9,10,11>
                  imul null, r2.w, r1.w, l(4)
                  mov r9.xyz, cb1[r2.w + 0].xyzx  // dirLight<0,1,2>
                  mov r10.xyz, cb1[r2.w + 1].xyzx  // dirLight<4,5,6>
                  mov r11.xyz, cb1[r2.w + 2].xyzx  // dirLight<8,9,10>
                  mov r12.xyz, cb1[r2.w + 3].xyzx  // dirLight<12,13,14>
                  mov r13.xyz, r1.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r14.xyz, r0.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 67 "Light.fx"
                  mul r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 71
                  dp3 r2.w, r13.xyzx, r12.xyzx
                  mov r3.w, -r2.w  // diffFactor<0:NaN:Inf>
                
                #line 75
                  lt r4.w, l(0.000000), r3.w
                
                #line 78
                  mul r7.xyz, r7.xyzx, r10.xyzx
                  mul r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r9.xyz, r2.wwww, r13.xyzx
                  add r9.xyz, r12.xyzx, r9.xyzx  // refLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r9.xyzx, r14.xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, r8.w
                  exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                  mul r8.xyz, r8.xyzx, r11.xyzx
                  mul r8.xyz, r2.wwww, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 75
                  movc r7.xyz, r4.wwww, r7.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r8.xyz, r4.wwww, r8.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                  mov r6.xyz, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.xyz, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r8.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 59
                  iadd r1.w, r1.w, l(1)  // i<0:[1,2]>
                endloop 
                
                #line 69
                add r0.xyz, r3.xyzx, r4.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, cb0[13].w  // litColor<3>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 61 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_world;                  // Offset:   64 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_temps 3
                
                #line 36 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // vout<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // vout<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // vout<2:NaN:Inf>
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // vout<3:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // vout<4:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // vout<5:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // vout<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // vout<7:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // vout<8:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // vout<9:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o0.xyz, r1.xyzx  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64 [unused]
                //   float4x4 g_world;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48
                //
                // }
                //
                // cbuffer PerFrame
                // {
                //
                //   struct DirLight
                //   {
                //       
                //       float4 ambient;                // Offset:    0
                //       float4 diffuse;                // Offset:   16
                //       float4 specular;               // Offset:   32
                //       float3 dir;                    // Offset:   48
                //       float unused;                  // Offset:   60
                //
                //   } g_lights[3];                     // Offset:    0 Size:   192
                //   float3 g_eyePos;                   // Offset:  192 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                // PerFrame                          cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[13], dynamicIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                
                #line 46 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                mov r0.xyz, -v0.xyzx
                add r0.xyz, r0.xyzx, cb1[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 50
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v2.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 54
                mov r2.xyz, l(0,0,0,0)  // A<0: -0f,1: -0f,2: -0f>
                
                #line 59
                mov r0.w, l(0)  // i<0: 0>
                mov r3.xyz, r2.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r2.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r2.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r0.w  // i<0:[0,2]>
                loop 
                  ilt r2.w, r1.w, l(2)
                  breakc_z r2.w
                
                #line 62
                  nop 
                  mov r6.xyz, cb0[12].xyzx  // mat<0,1,2>
                  mov r7.xyz, cb0[13].xyzx  // mat<4,5,6>
                  mov r8.xyzw, cb0[14].xyzw  // mat<8,9,10,11>
                  imul null, r2.w, r1.w, l(4)
                  mov r9.xyz, cb1[r2.w + 0].xyzx  // dirLight<0,1,2>
                  mov r10.xyz, cb1[r2.w + 1].xyzx  // dirLight<4,5,6>
                  mov r11.xyz, cb1[r2.w + 2].xyzx  // dirLight<8,9,10>
                  mov r12.xyz, cb1[r2.w + 3].xyzx  // dirLight<12,13,14>
                  mov r13.xyz, r1.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r14.xyz, r0.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 67 "Light.fx"
                  mul r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 71
                  dp3 r2.w, r13.xyzx, r12.xyzx
                  mov r3.w, -r2.w  // diffFactor<0:NaN:Inf>
                
                #line 75
                  lt r4.w, l(0.000000), r3.w
                
                #line 78
                  mul r7.xyz, r7.xyzx, r10.xyzx
                  mul r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r9.xyz, r2.wwww, r13.xyzx
                  add r9.xyz, r12.xyzx, r9.xyzx  // refLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r9.xyzx, r14.xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, r8.w
                  exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                  mul r8.xyz, r8.xyzx, r11.xyzx
                  mul r8.xyz, r2.wwww, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 75
                  movc r7.xyz, r4.wwww, r7.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r8.xyz, r4.wwww, r8.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                  mov r6.xyz, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.xyz, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r8.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 59
                  iadd r1.w, r1.w, l(1)  // i<0:[1,3]>
                endloop 
                
                #line 69
                add r0.xyz, r3.xyzx, r4.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, cb0[13].w  // litColor<3>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 61 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_world;                  // Offset:   64 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_temps 3
                
                #line 36 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // vout<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // vout<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // vout<2:NaN:Inf>
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // vout<3:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // vout<4:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // vout<5:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // vout<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // vout<7:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // vout<8:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // vout<9:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o0.xyz, r1.xyzx  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64 [unused]
                //   float4x4 g_world;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48
                //
                // }
                //
                // cbuffer PerFrame
                // {
                //
                //   struct DirLight
                //   {
                //       
                //       float4 ambient;                // Offset:    0
                //       float4 diffuse;                // Offset:   16
                //       float4 specular;               // Offset:   32
                //       float3 dir;                    // Offset:   48
                //       float unused;                  // Offset:   60
                //
                //   } g_lights[3];                     // Offset:    0 Size:   192
                //   float3 g_eyePos;                   // Offset:  192 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                // PerFrame                          cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[13], dynamicIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                
                #line 46 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                mov r0.xyz, -v0.xyzx
                add r0.xyz, r0.xyzx, cb1[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 50
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v2.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 54
                mov r2.xyz, l(0,0,0,0)  // A<0: -0f,1: -0f,2: -0f>
                
                #line 59
                mov r0.w, l(0)  // i<0: 0>
                mov r3.xyz, r2.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r2.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r2.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r0.w  // i<0>
                loop 
                  ilt r2.w, r1.w, l(3)
                  breakc_z r2.w
                
                #line 62
                  nop 
                  mov r6.xyz, cb0[12].xyzx  // mat<0,1,2>
                  mov r7.xyz, cb0[13].xyzx  // mat<4,5,6>
                  mov r8.xyzw, cb0[14].xyzw  // mat<8,9,10,11>
                  imul null, r2.w, r1.w, l(4)
                  mov r9.xyz, cb1[r2.w + 0].xyzx  // dirLight<0,1,2>
                  mov r10.xyz, cb1[r2.w + 1].xyzx  // dirLight<4,5,6>
                  mov r11.xyz, cb1[r2.w + 2].xyzx  // dirLight<8,9,10>
                  mov r12.xyz, cb1[r2.w + 3].xyzx  // dirLight<12,13,14>
                  mov r13.xyz, r1.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r14.xyz, r0.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 67 "Light.fx"
                  mul r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 71
                  dp3 r2.w, r13.xyzx, r12.xyzx
                  mov r3.w, -r2.w  // diffFactor<0:NaN:Inf>
                
                #line 75
                  lt r4.w, l(0.000000), r3.w
                
                #line 78
                  mul r7.xyz, r7.xyzx, r10.xyzx
                  mul r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r9.xyz, r2.wwww, r13.xyzx
                  add r9.xyz, r12.xyzx, r9.xyzx  // refLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r9.xyzx, r14.xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, r8.w
                  exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                  mul r8.xyz, r8.xyzx, r11.xyzx
                  mul r8.xyz, r2.wwww, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 75
                  movc r7.xyz, r4.wwww, r7.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r8.xyz, r4.wwww, r8.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62 "D:\Programs\C++\CSDN\Light\FX\BasicLight.fx"
                  mov r6.xyz, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.xyz, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r8.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 59
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 69
                add r0.xyz, r3.xyzx, r4.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, cb0[13].w  // litColor<3>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 61 instruction slots used
                            
            };
        }

    }

}

