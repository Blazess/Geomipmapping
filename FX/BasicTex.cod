//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer PerObject
{
    float4x4 g_worldViewProj;           // Offset:    0, size:   64
    float4x4 g_worldInvTranspose;       // Offset:   64, size:   64
    float4x4 g_world;                   // Offset:  128, size:   64
}

cbuffer PerFrame
{
    SpotLight g_spotLight;              // Offset:    0, size:   96
    Material g_material;                // Offset:   96, size:   48
    float3  g_eyePos;                   // Offset:  144, size:   12
}

//
// 2 local object(s)
//
Texture2D g_tex;
SamplerState samTex
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 TexLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:   64 Size:    64
                //   float4x4 g_world;                  // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                
                #line 42 "D:\Programs\C++\CSDN\Texture\FX\BasicTex.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // vout<3:NaN:Inf>
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // vout<4:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // vout<5:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // vout<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                mov r3.xy, v2.xyxx  // vout<10,11>
                mov o0.xyzw, r1.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r2.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r3.xyxx  // VS<10,11>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerFrame
                // {
                //
                //   struct SpotLight
                //   {
                //       
                //       float4 ambient;                // Offset:    0
                //       float4 diffuse;                // Offset:   16
                //       float4 specular;               // Offset:   32
                //       float3 dir;                    // Offset:   48
                //       float range;                   // Offset:   60
                //       float3 pos;                    // Offset:   64
                //       float spot;                    // Offset:   76
                //       float3 att;                    // Offset:   80
                //       float theta;                   // Offset:   92
                //
                //   } g_spotLight;                     // Offset:    0 Size:    96
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:   96
                //       float4 diffuse;                // Offset:  112
                //       float4 specular;               // Offset:  128
                //
                //   } g_material;                      // Offset:   96 Size:    48
                //   float3 g_eyePos;                   // Offset:  144 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samTex                            sampler      NA          NA    0        1
                // g_tex                             texture  float4          2d    0        1
                // PerFrame                          cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[10], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 58 "D:\Programs\C++\CSDN\Texture\FX\BasicTex.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[9].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r2.xyzw, cb0[6].xyzw  // mat<0,1,2,3>
                mov r3.xyzw, cb0[7].xyzw  // mat<4,5,6,7>
                mov r4.xyzw, cb0[8].xyzw  // mat<8,9,10,11>
                mov r5.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                mov r6.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                mov r7.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r9.xyz, cb0[4].xyzx  // L<16,17,18>
                mov r0.w, cb0[3].w  // L<15>
                mov r1.w, cb0[4].w  // L<19>
                mov r10.xyzw, cb0[5].xyzw  // L<20,21,22,23>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r11.xyz, v1.xyzx  // position<0,1,2>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 154 "Light.fx"
                mov r11.xyz, -r11.xyzx
                add r9.xyz, r9.xyzx, r11.xyzx  // dir<0:Inf,1:Inf,2:Inf>
                dp3 r8.w, r9.xyzx, r9.xyzx
                sqrt r8.w, r8.w  // dist<0:NaN:Inf>
                
                #line 159
                lt r0.w, r0.w, r8.w
                
                #line 163
                if_z r0.w
                  div r9.xyz, r9.xyzx, r8.wwww  // dir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 166
                  mul r0.w, r8.w, r10.y
                  add r0.w, r0.w, r10.x
                  mul r9.w, r8.w, r10.z
                  mul r8.w, r8.w, r9.w
                  add r0.w, r0.w, r8.w
                  div r0.w, l(1.000000), r0.w  // att<0:NaN:Inf>
                
                #line 169
                  dp3 r8.x, r9.xyzx, r8.xyzx
                  mov r8.x, -r8.x  // tmp<0:NaN:Inf>
                  sincos null, r8.y, r10.w
                  lt r8.y, r8.x, r8.y
                  if_z r8.y
                    max r8.x, r8.x, l(0.000000)
                    log r8.x, r8.x
                    mul r1.w, r1.w, r8.x
                    exp r1.w, r1.w  // spotFactor<0:NaN:Inf>
                
                #line 175
                    mul r2.xyzw, r2.xyzw, r5.xyzw
                    mul r2.xyzw, r1.wwww, r2.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 178
                    dp3 r5.x, r9.xyzx, r0.xyzx  // diffFactor<0:NaN:Inf>
                
                #line 181
                    lt r5.y, l(0.000000), r5.x
                    if_nz r5.y
                
                #line 184
                      mul r3.xyzw, r3.xyzw, r6.xyzw
                      mul r3.xyzw, r5.xxxx, r3.xyzw
                      mul r3.xyzw, r0.wwww, r3.xyzw
                      mul r3.xyzw, r1.wwww, r3.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      mov r5.xyz, -r9.xyzx
                      dp3 r5.w, r5.xyzx, r0.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r0.xyz, r0.xyzx, r5.wwww
                      add r0.xyz, r5.xyzx, r0.xyzx  // refLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r0.x, r0.xyzx, r1.xyzx
                      max r0.x, r0.x, l(0.000000)
                      log r0.x, r0.x
                      mul r0.x, r0.x, r4.w
                      exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                
                #line 191
                      mul r4.xyzw, r4.xyzw, r7.xyzw
                      mul r4.xyzw, r0.xxxx, r4.xyzw
                      mul r0.xyzw, r0.wwww, r4.xyzw
                      mul r0.xyzw, r1.wwww, r0.xyzw  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 181
                    else 
                      mov r3.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                      mov r0.xyzw, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f,3: 0f>
                    endif 
                
                #line 172
                  else 
                    mov r2.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r3.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r0.xyzw, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 163
                else 
                  mov r2.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r3.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r0.xyzw, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                
                #line 61 "D:\Programs\C++\CSDN\Texture\FX\BasicTex.fx"
                mov r2.xyzw, r2.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, r3.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.xyzw, r0.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 64
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 92 instruction slots used
                            
            };
        }

    }

    technique11 Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:   64 Size:    64
                //   float4x4 g_world;                  // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                
                #line 42 "D:\Programs\C++\CSDN\Texture\FX\BasicTex.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // vout<3:NaN:Inf>
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // vout<4:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // vout<5:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // vout<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                mov r3.xy, v2.xyxx  // vout<10,11>
                mov o0.xyzw, r1.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r2.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r3.xyxx  // VS<10,11>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samTex                            sampler      NA          NA    0        1
                // g_tex                             texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 64 "D:\Programs\C++\CSDN\Texture\FX\BasicTex.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r0.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                add r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // finalColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov o0.xyzw, r0.xyzw  // PS<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

}

